name: Deploy Frontend to Testserver

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      build_path: ${{ steps.set-output.outputs.path }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install --force

      - name: Build Frontend
        run: npm run build

      - name: Debug dist folder
        run: ls -la ./dist

      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  lighthouse:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Install Serve and Lighthouse
        run: npm install -g serve lighthouse

      - name: Start local server
        run: |
          serve -s dist -l 5000 &
          until curl -s http://localhost:5000 > /dev/null; do
            echo "Waiting for server..."
            sleep 1
          done

      - name: Run Lighthouse and generate HTML report
        run: |
          lighthouse http://localhost:5000 \
            --output html \
            --output-path ./lighthouse-report.html \
            --quiet \
            --chrome-flags="--headless"
        continue-on-error: true

      - name: Upload Lighthouse Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.html

  deploy:
    needs: lighthouse
    runs-on: ubuntu-latest

    steps:
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Deploy via rsync to /var/www/
        run: |
          echo "$SSH_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem

          echo "üîÅ Deployment nach: /var/www/"

          rsync -avzr --delete -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" ./dist/ $SSH_USER@$SSH_HOST:/var/www/

          rm -f deploy_key.pem
        env:
          SSH_KEY: ${{ secrets.TESTSERVER_SSH_KEY }}
          SSH_USER: ${{ secrets.TESTSERVER_USER }}
          SSH_HOST: ${{ secrets.TESTSERVER_HOST }}
